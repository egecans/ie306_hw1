import random

random.seed(2019400216 + 2019400231)  # Set seed using student ID's


# This simulation processes with minutes therefore multiplying every random value with 60.
def generate_interarrival_times():
    # Generate interarrival time, because 1 patient per hour, mu = 1
    interarrival_time = random.expovariate(1) * 60
    #print("currently generated interarrival time: " + str(interarrival_time))
    return round(interarrival_time,2)


def nurse_service_time():
    mu_t = 0.476190476
    # Generate service time for one patient at a triage nurse
    service_time = random.expovariate(mu_t) * 60
    #print("currently generated nurse evaluation time: " + str(service_time))
    return round(service_time,2)


def hospital_healing_time():
    mu = 0.152380952
    # Generate healing time for one patient in the hospital
    healing_time = random.expovariate(mu) * 60
    #print("currently generated hosp healing time: " + str(healing_time))
    return round(healing_time,2)


def home_healing_time(condition):
    # Generate healing time for one patient taking self-care at home
    if condition == "s":  # Patient in stable condition
        healing_time = random.expovariate(0.16)
    elif condition == "c":  # Patient in critical condition without hospital bed
        alpha = random.uniform(1.25, 1.75)
        healing_time = random.expovariate(0.16) * alpha
    else:  # Invalid input
        print("Invalid input. Please use 's' or 'c' as input for patient condition.")
        healing_time = None
    #print("currently generated home healing time: " + str(healing_time * 60))
    return round(healing_time * 60,2)

#generate values before to make simulation by hand
interarrival_time_list = []
for i in range(1000):
    interarrival_time_list.append(generate_interarrival_times())
print("interarrival time list: ")
print(interarrival_time_list)

nurse_time_list = []
for i in range(1000):
    nurse_time_list.append(nurse_service_time())
print("nurse service time list: ")
print(nurse_time_list)

hospital_healing_list = []
for i in range(1000):
    hospital_healing_list.append(hospital_healing_time())
print("hospital_healing_list list: ")
print(hospital_healing_list)

home_healing_c_list = []
for i in range(1000):
    home_healing_c_list.append(home_healing_time("c"))
print("home_healing_c_list list: ")
print(home_healing_c_list)

home_healing_s_list = []
for i in range(1000):
    home_healing_s_list.append(home_healing_time("s"))
print("home_healing_s_list list: ")
print(home_healing_s_list)

stable_or_critical_list = []
for i in range(1000):
    stable_or_critical_list.append(round(random.uniform(0, 1),2))
print("stable_or_critical_list list: ")
print(stable_or_critical_list)

# Initialize variables

num_patients = 50
num_nurses = 3
num_beds = 7

# Initialize the list to keep track of the availability of the nurses
nurse_busy = [False] * num_nurses
# Initialize the list to keep track of the total time each nurse is busy serving patients
nurse_utilization = [0] * num_nurses

clock = 0
first_arrival_time = interarrival_time_list.pop(0) #get the first interarrival time at t = 0
event_list = [(first_arrival_time, "Arrival", first_arrival_time)] #append it to the event list
num_in_triage = 0 #number of patients in triage
num_in_hospital = 0 #number of patients in the hospital
num_in_system = 0 #total number of patients enters the system 
num_used_beds = 0 #number of used beds
num_sent_to_home_s = 0 #number of patients sent to home because their status is stable
rejected_patients = 0 #number of rejected patients because of bed unavailability
num_healed = 0 #number of patients healed
num_healed_hosp = 0 #number of patients healed at hospital
num_healed_home_c = 0 #number of critical patients healed at home
num_healed_home_s = 0 #number of stable patients healed at home

length_waiting_queue = 0 #length of triage waiting queue
total_waiting_patient = 0 #total patients who wait the triage
total_waiting_time = 0 #total waiting time for triage
total_triage_time = 0 #total triage time
total_treatment_time_home_s = 0 #total treatment timeo f patients go home because their status are stable
total_treatment_time_home_c = 0 #total treatment time of patient whose status is critical but go home because of bed unavailability
total_treatment_time_hospital = 0 #total treatment time at the hospital
event_number = 0 #total event number

time_sick_better = 0 #total time sick persons get better
#when the system is idle at t=0  
#this values are for calculate marginal probabilities of being empty for beds
empty_bed_time = 0
start_empty_bed_time = 0
is_beds_empty = True

#when the system is idle at t=0  
#this values are for calculate marginal probabilities of being empty for triage
empty_nurse_time = 0
start_empty_nurse_time = 0
is_nurses_empty = True

#this values are for calculate joint probabilities of being empty for triage and beds
is_nurses_beds_empty = True
start_empty_nurse_bed_time = 0
empty_nurse_bed_time = 0

# Define arrival function, arrive at clock time. But when it's called from waiting queue, arrival_time won't be same as the clock
# Therefore it needs arrival_time parameter
def arrival(wait_time):
    global num_in_triage, total_waiting_patient, num_in_hospital, num_in_system, length_waiting_queue, empty_nurse_time, empty_nurse_bed_time, is_nurses_empty, is_nurses_beds_empty
    # print("arrival at {}".format(clock))
    num_in_hospital += 1 #increase number of patients in hospital
    num_in_system += 1   #increase number of patients in system
    t = interarrival_time_list.pop(0)   #take generated interarrival time from list
    event_list.append((clock + t, "Arrival", t)) # append the next arrival with its service time to FEL
    print("next arrival at {}".format(clock + t))
    if False in nurse_busy: #if there exist an available nurse
        if is_nurses_empty: #if all nurses are empty for now
            is_nurses_empty = False #make this false because one of them will be busy with the arriving patient.
            empty_nurse_time += clock - start_empty_nurse_time #calculate the time when all nurses were idle.
            if is_nurses_beds_empty: #if also beds are empty until now
                is_nurses_beds_empty = False #make this false because now one of nurse will be busy
                empty_nurse_bed_time += clock - start_empty_nurse_bed_time #calculate the time when all nurses and beds were idle.
        # If there is a free triage nurse, send the patient to the triage nurse
        available_nurse = nurse_busy.index(False) #select available nurse from the list
        nurse_busy[available_nurse] = True #make this nurse to busy
        num_in_triage += 1 #increase the patient number in triage.
        triage_time = nurse_time_list.pop(0) #get the triage (service) time from the list.
        # departure triage even that concludes in order departure time, event type, service time, id of nurse that services and the wait time of the patient to calculate total treatment time of him/her
        event_list.append((clock + triage_time, "Departure Triage", triage_time, available_nurse, wait_time))
        # Generate next arrival time
        print("Patients in triage: " + str(num_in_triage))
    else:
        # If there is no free triage nurse, wait any nurse to become available.
        length_waiting_queue += 1 #increase length of waiting queue to keep
        print("append waiting queue at " + str(clock) + " length waiting queue: " + str(length_waiting_queue))
         #append event list to waiting activity, with the arrival time of patient, in this way whenever there is an available nurse, the nurse can triage the patient comes first.
        event_list.append((clock, "Wait Triage"))
        total_waiting_patient += 1 #increase waiting patient to keep this data


#departure triage method with parameters in order: triage time, triage nurse id and the wait time of the patient to calculate total treatment time of him/her
def departure_triage(service_time, nurse_id, waiting_time):
    global num_in_triage, num_in_hospital, num_sent_to_home_s, num_used_beds, rejected_patients, total_triage_time, is_nurses_empty, start_empty_nurse_time, start_empty_nurse_bed_time, is_nurses_beds_empty, is_beds_empty, empty_bed_time, empty_nurse_bed_time
    total_triage_time += service_time #increase total triage time as the triage time of patient
    nurse_utilization[nurse_id] += service_time # Update the total time the nurse is busy serving patients
    nurse_busy[nurse_id] = False #make the current nurse available
    # Determine patient condition
    if stable_or_critical_list.pop(0) <= 0.2: #identify patient's statu if the value from list is smaller equal to 0.2 his/her statu will be stable else critical
        status = "s"
    else:
        status = "c"
    num_in_triage -= 1 #decrease the patient number in triage.
    print("Patients in triage: " + str(num_in_triage))
    if status == "s":   # If the patient is in stable condition, send the patient home
        num_sent_to_home_s += 1 #increase patients that send home as stable
        num_in_hospital -= 1    #decrease patient number in hospital
        t = home_healing_s_list.pop(0) #get the triage time from list
        #append stable patient's treatment in home event to event list with parameters in order: treatment time, event type, healing time,
        # and addition of wait and triage time of patient to keep this data to calculate total treatment time of the patient
        event_list.append((clock + t, "Treated at Home (S)", t, waiting_time+service_time)) 
    else: #if patient's status is critical
        if (num_used_beds < num_beds): #if there are available beds on the hospital
            num_used_beds += 1 #increase number of used beds as one.
            t = hospital_healing_list.pop(0) #get healing time at the hospital from the list
            #append treatment at the hospital event with following parameters: the healing time, event type, healing time at the hospital
            #and addition of wait and triage time of patient to keep this data to calculate total treatment time of the patient
            event_list.append((clock + t, "Treated at Hospital", t, waiting_time+service_time))

            if is_beds_empty: #if beds are empty before
                is_beds_empty = False #make this false because now one of beds is not empty
                empty_bed_time += clock - start_empty_bed_time #calculate the time until now from the last time when all beds are available
                if is_nurses_empty: #if also nurses were empty until now
                    is_nurses_beds_empty = False #make beds and nurses are empty false 
                    empty_nurse_bed_time = start_empty_nurse_bed_time - clock #calculate its time to evaluate joint probabiltiy
            
        else: #if there won't be an available bed in the hospital
            t = home_healing_c_list.pop(0) #get the healing time for critical patients at home from the list
            num_in_hospital -= 1 #decrease patients in hospital
            rejected_patients += 1 #increase total rejected patients
            #append this event to event list with following parameters: end of healing time, event type, healing time, time that patient consumes until now on the system
            event_list.append((clock + t, "Treated at Home (C)", t, waiting_time+service_time))

    #if all nurses are empty for now
    if num_in_triage == 0: 
            is_nurses_empty = True #make this true
            start_empty_nurse_time = clock #make the start time which all nurses are available at this time to calculate it later.
            if is_beds_empty: #if also beds are empty for now
                is_nurses_beds_empty = True #make this true because now both nurses and beds are available
                start_empty_nurse_bed_time = clock #make the start time which all nurses and beds are available at this time to calculate it later.

    # check whether a patient waits in queue, because it is sorted by time if there is a patient waits in queue
    # because it's time is arrival time it will be the first one if the list is sorted.
    event_list.sort()
    if (event_list[0][1] == "Wait Triage"):  # if someone waits, then the patient will be arrival soon.
        nurse_become_available(event_list[0][0]) #call this function with parameter of the arrival time of patients in queue

#this function is called whenever a patient's treatment end in the hospital with following parameters: healing time and time to enter the system
def treated_at_hospital(heal_time, time_to_start_treatment):
    global num_in_hospital, num_healed, num_healed_hosp, total_treatment_time_hospital, num_used_beds, is_beds_empty, start_empty_bed_time, is_nurses_beds_empty, start_empty_nurse_bed_time, time_sick_better
    num_in_hospital -= 1 #decrease patients in the hospital
    num_used_beds -= 1 #decrease number of beds is used
    num_healed += 1 #increase number of healed patient
    num_healed_hosp += 1 #increase number of patients who heals at the hospital

    if num_used_beds == 0: #if beds are empty now
            is_beds_empty = True #make is_beds_empty true
            start_empty_bed_time = clock #assign the start time of all beds are available time to this time
            if is_nurses_empty: #if also nurses are empty for now 
                is_nurses_beds_empty = True #make is_nurse_bed_empty True
                start_empty_nurse_bed_time = clock #assign the start time of all beds and nurses are available time to this time

    total_treatment_time_hospital += heal_time #increase total treatment time at the hospital as the healing time
    time_sick_better += heal_time + time_to_start_treatment  #add time difference between arrival and now to total time sick persons get better

#this function is called whenever stable patient's treatment ends with following parameters: healing time, the time patient enter the system
def treated_at_home_s(heal_time, time_to_start_treatment):
    global num_healed, num_healed_home_s, total_treatment_time_home_s, time_sick_better
    num_healed += 1 #increase number of healed patients
    num_healed_home_s += 1 #increase number of healed patients whose status are stable
    total_treatment_time_home_s += heal_time #increase total treatment time as the heal time
    time_sick_better += heal_time + time_to_start_treatment #add time until now from the time patient enters the system

#this function is called whenever critical patient's treatmen at home ends with following parameters: healing time, the time patient enter the system
def treated_at_home_c(heal_time, time_to_start_treatment):
    global num_healed, num_healed_home_c, total_treatment_time_home_c, time_sick_better
    num_healed += 1 #increase number of healed patients
    num_healed_home_c += 1 #increase number of patients whose status are critical but treats at home
    total_treatment_time_home_c += heal_time #increase total treatment time as the healing time
    time_sick_better += heal_time + time_to_start_treatment #add time until now from the time patient enters the system


#this function is called whenever there are some patients at the triage queue and one of nurses becomes available with parameter the time the patient enters the system
def nurse_become_available(arrive_time):
    global total_waiting_time, clock, length_waiting_queue
    waiting_time = clock - arrive_time #calculate waiting time with the difference of now and the time patient enters the system
    total_waiting_time += waiting_time #increase the total waiting time as the waiting time of patient
    length_waiting_queue -= 1 #decrease length of waiting queue
    print("\nwait since: " + str(arrive_time) + " arrive queue at: " + str(clock) + " length waiting queue: " + str(
        length_waiting_queue) + "\n")
    event_list.remove(event_list[0]) #this patient won't wait anymore so remove it from event_list
    # add arrival event to the event list with following parameters: arrival time, event_type, -1 (it means patient comes from waiting queue.), waiting time
    event_list.append((clock, "Arrival", -1, waiting_time))  


global_wait_time = 0 #make a global waiting time to use later

def advance_time():
    global clock, global_wait_time
    event = (-1, "", -1) #to prevent some errors initailize this, but it will change always.
    event_name = event_list[0][1] #get event name 
    if (event_name != "Wait Triage"): #if event is not waiting
        clock = event_list[0][0] #make clock as the time of event
        event = event_list[0] #make event this event
    else: #if it is waiting
        for i in range(1, len(event_list)): #find an event different than waiting in event list
            if event_list[i][1] != "Wait Triage":  #there will be always events other than wait because the system works correctly
                clock = event_list[i][0] #make time to the time of the first event other than waiting is the event
                event = event_list[i] #make event to the first event other than waiting is the event
                break
    if (event_name == "Arrival" and event[2] == -1): #if arrival event comes from waiting, transfer its waiting time to arrival function to calculate avg healing time of sick person
        global_wait_time = event[3] #make waiting time as this
    else: 
        global_wait_time = 0 #make waiting time as 0 because patient didn't wait triage
    # print("clock: {}".format(clock))
    # print("event: {}".format(event))
    event_list.remove(event) #remove event from event list
    return event #return event

#this function work with the type of event
def execute_event(event):
    event_name = event[1] #make this event name
    service_time = event[2] #make this event's service time
    print("\n" + "event_name: " + str(event_name) + " at: " + str(clock) + " its service time: " + str(
        service_time) + "\n")
    if event_name == "Arrival": #if event is arrival
        arrival(global_wait_time) #call arrival function with the patients waiting time
    elif event_name == "Departure Triage": #if event is departure from triage
        departure_triage(service_time, event[3], event[4])  #call function with service time, nurse id and the waiting time
    elif event_name == "Treated at Hospital": #if event is end of treatment at the hospital
        treated_at_hospital(service_time, event[3]) #call function with service time and the waiting time
    elif event_name == "Treated at Home (S)": #if event is end of treatment of stable patient at the home
        treated_at_home_s(service_time, event[3]) #call function with service time and the waiting time
    elif event_name == "Treated at Home (C)": #if event is end of treatment of critical patient at the hospital
        treated_at_home_c(service_time, event[3]) #call function with service time and the waiting time
    else:
        print("Invalid event OR Wait coming.")


# Main loop
while num_healed < 5: # as number of healed person smaller than 5 it will be continue
    event_list.sort() #first sort the event list depends on time
    event = advance_time() #then advance_time to comming event and return the coming event
    execute_event(event) #then execute the current event
    event_number += 1 #increasing event number
    print(event_list) #print the event list

#add waited times of patient that couldn't find available nurse until system ends to the total waited time.
for i in range (len(event_list)):
    if event_list[i][1] == "Wait Triage":
        total_waiting_time += clock - event_list[i][0] 

#add service time of nurses if their triage operation stay half because of system ends.
for i in range (len(event_list)):
    if event_list[i][1] == "Departure Triage": 
        nurse_id = event_list[i][3] #get nurse id 
        triage_start_time = event_list[i][0] - event_list[i][2] #calculate the start of triage operation
        last_service_time_until_system_ends = clock - triage_start_time #add this operation to toal triage
        nurse_utilization[nurse_id] += last_service_time_until_system_ends #add this operation to nurse that triages

#add occupied of bed time if patient's treatment stay in half because of system ends.
bed_occupied_time = total_treatment_time_hospital
for i in range (len(event_list)):
    if event_list[i][1] == "Treated at Hospital":
        bed_start_time = event_list[i][0] - event_list[i][2]
        bed_time_until_system_ends = clock - bed_start_time
        bed_occupied_time += bed_time_until_system_ends

#this method is for convert decimal to hh.mm notation
def round_to_hour(time):
    rounded = round(time / 60, 2) #round the number to 2 decimals
    roundedsplit = str(rounded).split(".") #split the float with .
    time_in_min = round(float(roundedsplit[0] + "." + str(int(float(roundedsplit[1]) * 0.6))), 2) #make decimal in minutes to hh.mm
    return time_in_min 



#printings at the end with the explanation
print("Simulation complete.")
print("Total time: {}".format(round_to_hour(clock)))
print("Number of patients healed: {}".format(num_healed))
print("Number of patients healed hosp: {}".format(num_healed_hosp))
print("Number of patients healed home c: {}".format(num_healed_home_c))
print("Number of patients healed home s: {}".format(num_healed_home_s))
print("Number of patients sent home (s):  {}".format(num_sent_to_home_s))
print("Number of rejected people due to bed availability:  {}".format(rejected_patients))
print("Number of patients in triage: {}".format(num_in_triage))
print("Number of patients in beds: {}".format(num_used_beds))
print("Number of patients in hospital: {}".format(num_in_hospital))
print("Total Number of patients entered in system: {}".format(num_in_system))
print("Total waiting patient: {}".format(total_waiting_patient))
print("Total waiting time: {}".format(round_to_hour(total_waiting_time)))
print("Total triage time: {}".format(round_to_hour(total_triage_time)))
print("Total total_treatment_time_home_s: {}".format(round_to_hour(total_treatment_time_home_s)))
print("Total treatment_time_home_c: {}".format(round_to_hour(total_treatment_time_home_c)))
print("Total treatment_time_hospital: {}".format(round_to_hour(total_treatment_time_hospital)))
# Calculate the average utilization of each nurse
nurse_avg_utilization = [utilization / clock for utilization in nurse_utilization]
print("Average utilization of each nurse: {}".format(nurse_avg_utilization))
print("Avarage number of rejected people due to bed availability:  {}".format(rejected_patients/num_in_system))
print("average number of occupied beds in the hospital: " + str(bed_occupied_time/clock))
print("average number of patients that are treated at home: " + str((num_healed_home_s+num_healed_home_c)/num_in_system))
print("average time a sick person gets better: " + str((total_treatment_time_home_c+total_treatment_time_home_s+total_treatment_time_hospital)/num_healed))
print("marginal probabilities of being empty for triage: " + str(empty_nurse_time/clock))
print("marginal probabilities of being empty for beds: " + str(empty_bed_time/clock))
print("joint probabilities of being empty for beds and nurses: " + str(empty_nurse_bed_time/clock))
print("average time a sick person gets better: " + str(time_sick_better/num_healed))


